PROJECT #4: ROBOTIC ARM (TASK 8)

import numpy as np

class RoboticArm:
    def __init__(self, link_lengths):
        self.num_joints = len(link_lengths)
        self.link_lengths = link_lengths
        self.joint_angles = np.zeros(self.num_joints)
        self.joint_positions = np.zeros((self.num_joints + 1, 3))

    def forward_kinematics(self, angles):
        positions = np.zeros((self.num_joints + 1, 3))
        for i in range(1, self.num_joints + 1):
            positions[i] = positions[i - 1] + self._rotation_matrix(angles[i - 1]).dot([self.link_lengths[i - 1], 0, 0])
        return positions

    def _rotation_matrix(self, angle):
        c = np.cos(np.radians(angle))
        s = np.sin(np.radians(angle))
        return np.array([[c, -s, 0],
                         [s, c, 0],
                         [0, 0, 1]])

    def backward_kinematics(self, target):
        iterations = 0
        epsilon = 0.01
        max_iterations = 1000
        error = np.linalg.norm(target - self.joint_positions[-1])

        while error > epsilon and iterations < max_iterations:
            self._backward_reaching(target)
            self._forward_reaching(target)
            error = np.linalg.norm(target - self.joint_positions[-1])
            iterations += 1
        if iterations < max_iterations:
            print("Convergence achieved in {} iterations.".format(iterations))
            print("Optimal joint angles:", self.joint_angles)
            return True
        else:
            print("Convergence not achieved within maximum iterations.")
            return False

    def _backward_reaching(self, target):
        self.joint_positions[-1] = target
        for i in range(self.num_joints - 1, 0, -1):
            direction = self.joint_positions[i + 1] - self.joint_positions[i]
            direction /= np.linalg.norm(direction)
            self.joint_positions[i] = self.joint_positions[i + 1] - direction * self.link_lengths[i]

    def _forward_reaching(self, target):
        self.joint_positions[0] = self.joint_positions[0]
        for i in range(0, self.num_joints - 1):
            direction = self.joint_positions[i] - self.joint_positions[i + 1]
            direction /= np.linalg.norm(direction)
            self.joint_positions[i + 1] = self.joint_positions[i] - direction * self.link_lengths[i]

if __name__ == "__main__":
    link_lengths = [23, 15, 7]  # Change the lengths accordingly
    arm = RoboticArm(link_lengths)

    print("Enter initial joint angles:")
    initial_angles = np.zeros(arm.num_joints)
    for i in range(arm.num_joints):
        initial_angles[i] = float(input("Joint {} angle: ".format(i+1)))

    target_position = np.array([float(input("Target x-coordinate: ")),
                                float(input("Target y-coordinate: ")),
                                float(input("Target z-coordinate: "))])

    arm.joint_angles = initial_angles
    arm.joint_positions = arm.forward_kinematics(arm.joint_angles)

    reachable = arm.backward_kinematics(target_position)
    if reachable:
        print("The target position is reachable.")
    else:
        print("The target position is not reachable within maximum iterations.")

